// <auto-generated />
using System;
using Ecommerce_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251028113451_updatedWishlist")]
    partial class updatedWishlist
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce_API.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "system",
                            CreatedOn = new DateTime(2025, 10, 28, 17, 4, 51, 447, DateTimeKind.Local).AddTicks(7802),
                            DeletedBy = "system",
                            IsDeleted = false,
                            ModifiedBy = "system",
                            Name = "Men"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "system",
                            CreatedOn = new DateTime(2025, 10, 28, 17, 4, 51, 447, DateTimeKind.Local).AddTicks(7814),
                            DeletedBy = "system",
                            IsDeleted = false,
                            ModifiedBy = "system",
                            Name = "Women"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "system",
                            CreatedOn = new DateTime(2025, 10, 28, 17, 4, 51, 447, DateTimeKind.Local).AddTicks(7815),
                            DeletedBy = "system",
                            IsDeleted = false,
                            ModifiedBy = "system",
                            Name = "Kids"
                        });
                });

            modelBuilder.Entity("Ecommerce_API.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedBy = "system",
                            CreatedOn = new DateTime(2025, 10, 28, 17, 4, 51, 447, DateTimeKind.Local).AddTicks(7903),
                            CurrentStock = 50,
                            DeletedBy = "system",
                            Description = "Classic Blue Denim Jacket",
                            InStock = true,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = "system",
                            Name = "Denim Jacket",
                            Price = 2499m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedBy = "system",
                            CreatedOn = new DateTime(2025, 10, 28, 17, 4, 51, 447, DateTimeKind.Local).AddTicks(7905),
                            CurrentStock = 80,
                            DeletedBy = "system",
                            Description = "Unisex Red Hoodie",
                            InStock = true,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = "system",
                            Name = "Red Hoodie",
                            Price = 1799m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedBy = "system",
                            CreatedOn = new DateTime(2025, 10, 28, 17, 4, 51, 447, DateTimeKind.Local).AddTicks(7907),
                            CurrentStock = 100,
                            DeletedBy = "system",
                            Description = "Soft cotton T-shirt for kids",
                            InStock = true,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = "system",
                            Name = "Kids Cartoon Tee",
                            Price = 599m
                        });
                });

            modelBuilder.Entity("Ecommerce_API.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "system",
                            CreatedOn = new DateTime(2025, 10, 28, 17, 4, 51, 447, DateTimeKind.Local).AddTicks(7923),
                            DeletedBy = "system",
                            ImageUrl = "https://via.placeholder.com/300",
                            IsDeleted = false,
                            IsMain = true,
                            ModifiedBy = "system",
                            ProductId = 1,
                            PublicId = "demo1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "system",
                            CreatedOn = new DateTime(2025, 10, 28, 17, 4, 51, 447, DateTimeKind.Local).AddTicks(7925),
                            DeletedBy = "system",
                            ImageUrl = "https://via.placeholder.com/300",
                            IsDeleted = false,
                            IsMain = true,
                            ModifiedBy = "system",
                            ProductId = 2,
                            PublicId = "demo2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "system",
                            CreatedOn = new DateTime(2025, 10, 28, 17, 4, 51, 447, DateTimeKind.Local).AddTicks(7926),
                            DeletedBy = "system",
                            ImageUrl = "https://via.placeholder.com/300",
                            IsDeleted = false,
                            IsMain = true,
                            ModifiedBy = "system",
                            ProductId = 3,
                            PublicId = "demo3"
                        });
                });

            modelBuilder.Entity("Ecommerce_API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ecommerce_API.Entities.Product", b =>
                {
                    b.HasOne("Ecommerce_API.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce_API.Entities.ProductImage", b =>
                {
                    b.HasOne("Ecommerce_API.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce_API.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce_API.Entities.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
